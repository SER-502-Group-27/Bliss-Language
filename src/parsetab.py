# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "ADD_ASSIGN AND ASSIGN COLON DEDENT DIVIDE DIV_ASSIGN ELIF ELSE EQUAL FOR GREATER_EQUAL GREATER_THAN IDENTIFIER IF IN INDENT INTEGER LESS_EQUAL LESS_THAN LPAREN MINUS MODULO MOD_ASSIGN MUL_ASSIGN NOT NOT_EQUAL NUMBER OR PLUS PRINT RANGE RPAREN STRING SUB_ASSIGN TIMES WHILEstatement : expressionstatement : IDENTIFIER ASSIGN expression\n    statement : IDENTIFIER ADD_ASSIGN expression\n              | IDENTIFIER SUB_ASSIGN expression\n              | IDENTIFIER MUL_ASSIGN expression\n              | IDENTIFIER DIV_ASSIGN expression\n              | IDENTIFIER MOD_ASSIGN expression\n    expression : IDENTIFIER\n    expression : expression PLUS term\n               | expression MINUS term\n               | term\n    \n    term : term TIMES factor\n         | term DIVIDE factor\n         | term MODULO factor\n         | factor\n    \n    factor : NUMBER\n           | IDENTIFIER\n           | LPAREN expression RPAREN\n    "

_lr_action_items = {
    "IDENTIFIER": (
        [
            0,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
        ],
        [
            3,
            20,
            22,
            22,
            20,
            20,
            20,
            20,
            20,
            20,
            22,
            22,
            22,
        ],
    ),
    "NUMBER": (
        [
            0,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
        ],
        [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
        ],
    ),
    "LPAREN": (
        [
            0,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
        ],
        [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
        ],
    ),
    "$end": (
        [
            1,
            2,
            3,
            4,
            5,
            6,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
        ],
        [
            0,
            -1,
            -8,
            -11,
            -15,
            -16,
            -8,
            -9,
            -17,
            -10,
            -2,
            -3,
            -4,
            -5,
            -6,
            -7,
            -12,
            -13,
            -14,
            -18,
        ],
    ),
    "PLUS": (
        [
            2,
            3,
            4,
            5,
            6,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
        ],
        [
            8,
            -8,
            -11,
            -15,
            -16,
            8,
            -8,
            -9,
            -17,
            -10,
            8,
            8,
            8,
            8,
            8,
            8,
            -12,
            -13,
            -14,
            -18,
        ],
    ),
    "MINUS": (
        [
            2,
            3,
            4,
            5,
            6,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
        ],
        [
            9,
            -8,
            -11,
            -15,
            -16,
            9,
            -8,
            -9,
            -17,
            -10,
            9,
            9,
            9,
            9,
            9,
            9,
            -12,
            -13,
            -14,
            -18,
        ],
    ),
    "ASSIGN": (
        [
            3,
        ],
        [
            10,
        ],
    ),
    "ADD_ASSIGN": (
        [
            3,
        ],
        [
            11,
        ],
    ),
    "SUB_ASSIGN": (
        [
            3,
        ],
        [
            12,
        ],
    ),
    "MUL_ASSIGN": (
        [
            3,
        ],
        [
            13,
        ],
    ),
    "DIV_ASSIGN": (
        [
            3,
        ],
        [
            14,
        ],
    ),
    "MOD_ASSIGN": (
        [
            3,
        ],
        [
            15,
        ],
    ),
    "TIMES": (
        [
            3,
            4,
            5,
            6,
            20,
            21,
            22,
            23,
            30,
            31,
            32,
            33,
        ],
        [
            -17,
            16,
            -15,
            -16,
            -17,
            16,
            -17,
            16,
            -12,
            -13,
            -14,
            -18,
        ],
    ),
    "DIVIDE": (
        [
            3,
            4,
            5,
            6,
            20,
            21,
            22,
            23,
            30,
            31,
            32,
            33,
        ],
        [
            -17,
            17,
            -15,
            -16,
            -17,
            17,
            -17,
            17,
            -12,
            -13,
            -14,
            -18,
        ],
    ),
    "MODULO": (
        [
            3,
            4,
            5,
            6,
            20,
            21,
            22,
            23,
            30,
            31,
            32,
            33,
        ],
        [
            -17,
            18,
            -15,
            -16,
            -17,
            18,
            -17,
            18,
            -12,
            -13,
            -14,
            -18,
        ],
    ),
    "RPAREN": (
        [
            4,
            5,
            6,
            19,
            20,
            21,
            22,
            23,
            30,
            31,
            32,
            33,
        ],
        [
            -11,
            -15,
            -16,
            33,
            -8,
            -9,
            -17,
            -10,
            -12,
            -13,
            -14,
            -18,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "statement": (
        [
            0,
        ],
        [
            1,
        ],
    ),
    "expression": (
        [
            0,
            7,
            10,
            11,
            12,
            13,
            14,
            15,
        ],
        [
            2,
            19,
            24,
            25,
            26,
            27,
            28,
            29,
        ],
    ),
    "term": (
        [
            0,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
        ],
        [
            4,
            4,
            21,
            23,
            4,
            4,
            4,
            4,
            4,
            4,
        ],
    ),
    "factor": (
        [
            0,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
        ],
        [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            30,
            31,
            32,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> statement", "S'", 1, None, None, None),
    ("statement -> expression", "statement", 1, "p_statement_expr", "grammar.py", 9),
    (
        "statement -> IDENTIFIER ASSIGN expression",
        "statement",
        3,
        "p_statement_assign",
        "grammar.py",
        14,
    ),
    (
        "statement -> IDENTIFIER ADD_ASSIGN expression",
        "statement",
        3,
        "p_statement_assign_shorthand",
        "grammar.py",
        21,
    ),
    (
        "statement -> IDENTIFIER SUB_ASSIGN expression",
        "statement",
        3,
        "p_statement_assign_shorthand",
        "grammar.py",
        22,
    ),
    (
        "statement -> IDENTIFIER MUL_ASSIGN expression",
        "statement",
        3,
        "p_statement_assign_shorthand",
        "grammar.py",
        23,
    ),
    (
        "statement -> IDENTIFIER DIV_ASSIGN expression",
        "statement",
        3,
        "p_statement_assign_shorthand",
        "grammar.py",
        24,
    ),
    (
        "statement -> IDENTIFIER MOD_ASSIGN expression",
        "statement",
        3,
        "p_statement_assign_shorthand",
        "grammar.py",
        25,
    ),
    ("expression -> IDENTIFIER", "expression", 1, "p_expression_var", "grammar.py", 41),
    (
        "expression -> expression PLUS term",
        "expression",
        3,
        "p_expression",
        "grammar.py",
        47,
    ),
    (
        "expression -> expression MINUS term",
        "expression",
        3,
        "p_expression",
        "grammar.py",
        48,
    ),
    ("expression -> term", "expression", 1, "p_expression", "grammar.py", 49),
    ("term -> term TIMES factor", "term", 3, "p_term", "grammar.py", 62),
    ("term -> term DIVIDE factor", "term", 3, "p_term", "grammar.py", 63),
    ("term -> term MODULO factor", "term", 3, "p_term", "grammar.py", 64),
    ("term -> factor", "term", 1, "p_term", "grammar.py", 65),
    ("factor -> NUMBER", "factor", 1, "p_factor", "grammar.py", 80),
    ("factor -> IDENTIFIER", "factor", 1, "p_factor", "grammar.py", 81),
    ("factor -> LPAREN expression RPAREN", "factor", 3, "p_factor", "grammar.py", 82),
]

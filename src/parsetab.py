
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_ASSIGN AND ASSIGN BOOLEAN BREAK COLON COMMA CONTINUE DEF DIVIDE DIV_ASSIGN ELIF ELSE EQUAL FLOAT FOR GREATER_EQUAL GREATER_THAN IDENTIFIER IF IN INDENT INTEGER LESS_EQUAL LESS_THAN LPAREN MINUS MODULO MOD_ASSIGN MUL_ASSIGN NEWLINE NOT NOT_EQUAL NUMBER OR OUTDENT PLUS PRINT RANGE RPAREN STRING STRING_LITERAL SUB_ASSIGN TIMES WHILE\n    program : program statement\n            | statement\n    \n    block : INDENT statements OUTDENT\n    \n    statements : statement\n               | statements statement\n    \n    statement : simple_statement\n              | compound_statement\n    \n    simple_statement : expression_stmt\n                     | assignment_stmt\n                     | print_stmt\n    \n    compound_statement : if_stmt\n    \n    if_stmt : IF expression COLON block\n            | IF expression COLON block ELSE COLON block\n    expression_stmt : expressionassignment_stmt : IDENTIFIER ASSIGN expression\n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression MODULO expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression GREATER_EQUAL expression\n               | expression LESS_EQUAL expression\n               | expression EQUAL expression\n               | expression NOT_EQUAL expression\n    expression : LPAREN expression RPARENexpression : INTEGERexpression : FLOATexpression : IDENTIFIERprint_stmt : PRINT LPAREN expression RPAREN'
    
_lr_action_items = {'IDENTIFIER':([0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,52,53,55,56,57,],[10,10,-2,-6,-7,-8,-9,-10,-11,-14,-30,31,31,-28,-29,-1,31,31,31,31,31,31,31,31,31,31,31,31,31,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-31,-12,10,10,-4,-3,-5,-13,]),'PRINT':([0,1,2,3,4,5,6,7,8,9,10,14,15,16,31,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,52,53,55,56,57,],[11,11,-2,-6,-7,-8,-9,-10,-11,-14,-30,-28,-29,-1,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-31,-12,11,11,-4,-3,-5,-13,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,14,15,16,31,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,52,53,55,56,57,],[13,13,-2,-6,-7,-8,-9,-10,-11,-14,-30,-28,-29,-1,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-31,-12,13,13,-4,-3,-5,-13,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,52,53,55,56,57,],[12,12,-2,-6,-7,-8,-9,-10,-11,-14,-30,29,12,12,-28,-29,-1,12,12,12,12,12,12,12,12,12,12,12,12,12,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-31,-12,12,12,-4,-3,-5,-13,]),'INTEGER':([0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,52,53,55,56,57,],[14,14,-2,-6,-7,-8,-9,-10,-11,-14,-30,14,14,-28,-29,-1,14,14,14,14,14,14,14,14,14,14,14,14,14,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-31,-12,14,14,-4,-3,-5,-13,]),'FLOAT':([0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,52,53,55,56,57,],[15,15,-2,-6,-7,-8,-9,-10,-11,-14,-30,15,15,-28,-29,-1,15,15,15,15,15,15,15,15,15,15,15,15,15,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-31,-12,15,15,-4,-3,-5,-13,]),'$end':([1,2,3,4,5,6,7,8,9,10,14,15,16,31,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,55,57,],[0,-2,-6,-7,-8,-9,-10,-11,-14,-30,-28,-29,-1,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-31,-12,-3,-13,]),'OUTDENT':([3,4,5,6,7,8,9,10,14,15,31,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,52,53,55,56,57,],[-6,-7,-8,-9,-10,-11,-14,-30,-28,-29,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-31,-12,55,-4,-3,-5,-13,]),'PLUS':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[17,-30,-28,-29,17,-30,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-27,]),'MINUS':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[18,-30,-28,-29,18,-30,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-27,]),'TIMES':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[19,-30,-28,-29,19,-30,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-27,]),'DIVIDE':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[20,-30,-28,-29,20,-30,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-27,]),'MODULO':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[21,-30,-28,-29,21,-30,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-27,]),'GREATER_THAN':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[22,-30,-28,-29,22,-30,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-27,]),'LESS_THAN':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[23,-30,-28,-29,23,-30,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-27,]),'GREATER_EQUAL':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[24,-30,-28,-29,24,-30,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-27,]),'LESS_EQUAL':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[25,-30,-28,-29,25,-30,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-27,]),'EQUAL':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[26,-30,-28,-29,26,-30,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-27,]),'NOT_EQUAL':([9,10,14,15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[27,-30,-28,-29,27,-30,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-27,]),'ASSIGN':([10,],[28,]),'RPAREN':([14,15,30,31,33,34,35,36,37,38,39,40,41,42,43,45,46,],[-28,-29,46,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,48,-27,]),'COLON':([14,15,31,32,33,34,35,36,37,38,39,40,41,42,43,46,51,],[-28,-29,-30,47,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,54,]),'INDENT':([47,54,],[50,50,]),'ELSE':([49,55,],[51,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,50,52,],[2,16,53,56,]),'simple_statement':([0,1,50,52,],[3,3,3,3,]),'compound_statement':([0,1,50,52,],[4,4,4,4,]),'expression_stmt':([0,1,50,52,],[5,5,5,5,]),'assignment_stmt':([0,1,50,52,],[6,6,6,6,]),'print_stmt':([0,1,50,52,],[7,7,7,7,]),'if_stmt':([0,1,50,52,],[8,8,8,8,]),'expression':([0,1,12,13,17,18,19,20,21,22,23,24,25,26,27,28,29,50,52,],[9,9,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,9,9,]),'block':([47,54,],[49,57,]),'statements':([50,],[52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','grammar.py',10),
  ('program -> statement','program',1,'p_program','grammar.py',11),
  ('block -> INDENT statements OUTDENT','block',3,'p_block','grammar.py',21),
  ('statements -> statement','statements',1,'p_statements','grammar.py',28),
  ('statements -> statements statement','statements',2,'p_statements','grammar.py',29),
  ('statement -> simple_statement','statement',1,'p_statement','grammar.py',41),
  ('statement -> compound_statement','statement',1,'p_statement','grammar.py',42),
  ('simple_statement -> expression_stmt','simple_statement',1,'p_simple_statement','grammar.py',49),
  ('simple_statement -> assignment_stmt','simple_statement',1,'p_simple_statement','grammar.py',50),
  ('simple_statement -> print_stmt','simple_statement',1,'p_simple_statement','grammar.py',51),
  ('compound_statement -> if_stmt','compound_statement',1,'p_compound_statement','grammar.py',58),
  ('if_stmt -> IF expression COLON block','if_stmt',4,'p_if_stmt','grammar.py',65),
  ('if_stmt -> IF expression COLON block ELSE COLON block','if_stmt',7,'p_if_stmt','grammar.py',66),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','grammar.py',77),
  ('assignment_stmt -> IDENTIFIER ASSIGN expression','assignment_stmt',3,'p_assignment_stmt','grammar.py',82),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','grammar.py',89),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','grammar.py',90),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','grammar.py',91),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','grammar.py',92),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','grammar.py',93),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binop','grammar.py',94),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binop','grammar.py',95),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression_binop','grammar.py',96),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression_binop','grammar.py',97),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','grammar.py',98),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression_binop','grammar.py',99),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','grammar.py',118),
  ('expression -> INTEGER','expression',1,'p_expression_number','grammar.py',123),
  ('expression -> FLOAT','expression',1,'p_expression_float','grammar.py',128),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','grammar.py',133),
  ('print_stmt -> PRINT LPAREN expression RPAREN','print_stmt',4,'p_print_stmt','grammar.py',145),
]

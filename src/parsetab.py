
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_ASSIGN AND ASSIGN COLON DIVIDE DIV_ASSIGN ELIF ELSE EQUAL FOR GREATER_EQUAL GREATER_THAN IDENTIFIER IF IN INTEGER LESS_EQUAL LESS_THAN LPAREN MINUS MODULO MOD_ASSIGN MUL_ASSIGN NOT NOT_EQUAL NUMBER OR PLUS PRINT RANGE RPAREN STRING SUB_ASSIGN TIMES WHILEstatement : expressionstatement : IDENTIFIER ASSIGN expressionexpression : IDENTIFIER\n    expression : expression PLUS term\n               | expression MINUS term\n               | term\n    \n    term : term TIMES factor\n         | term DIVIDE factor\n         | term MODULO factor\n         | factor\n    \n    factor : NUMBER\n           | IDENTIFIER\n           | LPAREN expression RPAREN\n    '
    
_lr_action_items = {'IDENTIFIER':([0,7,8,9,10,11,12,13,],[3,15,17,17,15,17,17,17,]),'NUMBER':([0,7,8,9,10,11,12,13,],[6,6,6,6,6,6,6,6,]),'LPAREN':([0,7,8,9,10,11,12,13,],[7,7,7,7,7,7,7,7,]),'$end':([1,2,3,4,5,6,15,16,17,18,19,20,21,22,23,],[0,-1,-3,-6,-10,-11,-3,-4,-12,-5,-2,-7,-8,-9,-13,]),'PLUS':([2,3,4,5,6,14,15,16,17,18,19,20,21,22,23,],[8,-3,-6,-10,-11,8,-3,-4,-12,-5,8,-7,-8,-9,-13,]),'MINUS':([2,3,4,5,6,14,15,16,17,18,19,20,21,22,23,],[9,-3,-6,-10,-11,9,-3,-4,-12,-5,9,-7,-8,-9,-13,]),'ASSIGN':([3,],[10,]),'TIMES':([3,4,5,6,15,16,17,18,20,21,22,23,],[-12,11,-10,-11,-12,11,-12,11,-7,-8,-9,-13,]),'DIVIDE':([3,4,5,6,15,16,17,18,20,21,22,23,],[-12,12,-10,-11,-12,12,-12,12,-7,-8,-9,-13,]),'MODULO':([3,4,5,6,15,16,17,18,20,21,22,23,],[-12,13,-10,-11,-12,13,-12,13,-7,-8,-9,-13,]),'RPAREN':([4,5,6,14,15,16,17,18,20,21,22,23,],[-6,-10,-11,23,-3,-4,-12,-5,-7,-8,-9,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,7,10,],[2,14,19,]),'term':([0,7,8,9,10,],[4,4,16,18,4,]),'factor':([0,7,8,9,10,11,12,13,],[5,5,5,5,5,20,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','grammar.py',9),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement_assign','grammar.py',14),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','grammar.py',20),
  ('expression -> expression PLUS term','expression',3,'p_expression','grammar.py',26),
  ('expression -> expression MINUS term','expression',3,'p_expression','grammar.py',27),
  ('expression -> term','expression',1,'p_expression','grammar.py',28),
  ('term -> term TIMES factor','term',3,'p_term','grammar.py',41),
  ('term -> term DIVIDE factor','term',3,'p_term','grammar.py',42),
  ('term -> term MODULO factor','term',3,'p_term','grammar.py',43),
  ('term -> factor','term',1,'p_term','grammar.py',44),
  ('factor -> NUMBER','factor',1,'p_factor','grammar.py',59),
  ('factor -> IDENTIFIER','factor',1,'p_factor','grammar.py',60),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','grammar.py',61),
]

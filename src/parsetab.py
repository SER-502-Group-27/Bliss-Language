
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftORleftANDnonassocLESS_THANGREATER_THANLESS_EQUALGREATER_EQUALEQUALNOT_EQUALleftPLUSMINUSleftTIMESDIVIDEMODULOrightUMINUSADD_ASSIGN AND ASSIGN BOOLEAN BREAK COLON COMMA CONTINUE DEF DIVIDE DIV_ASSIGN ELIF ELSE EQUAL FLOAT FOR GREATER_EQUAL GREATER_THAN IDENTIFIER IF IN INDENT INTEGER LBRACKET LESS_EQUAL LESS_THAN LPAREN MINUS MODULO MOD_ASSIGN MUL_ASSIGN NEWLINE NOT NOT_EQUAL NUMBER OR OUTDENT PLUS PRINT RANGE RBRACKET RPAREN STRING STRING_LITERAL SUB_ASSIGN TIMES WHILE\n    program : statements\n    \n    statements : statements statement\n               | statement\n    \n    statement : assignment\n              | expression\n              | control_flow\n              | function_definition\n              | PRINT LPAREN expression RPAREN\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression MODULO expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression GREATER_EQUAL expression\n               | expression LESS_EQUAL expression\n               | expression EQUAL expression\n               | expression NOT_EQUAL expression\n    \n    expression : LPAREN expression RPAREN\n    \n    expression : INTEGER\n               | FLOAT\n    \n    expression : IDENTIFIER\n    \n    expression : STRING_LITERAL\n    \n    expression : BOOLEAN\n    \n    expression : MINUS expression %prec UMINUS\n               | NOT expression %prec NOT\n    \n    assignment : IDENTIFIER ASSIGN expression\n               | IDENTIFIER ADD_ASSIGN expression\n               | IDENTIFIER SUB_ASSIGN expression\n               | IDENTIFIER MUL_ASSIGN expression\n               | IDENTIFIER DIV_ASSIGN expression\n               | IDENTIFIER MOD_ASSIGN expression\n    \n    expression : LBRACKET list_elements RBRACKET\n    \n    list_elements : list_elements COMMA expression\n                  | expression\n    \n    expression : expression LBRACKET slice RBRACKET\n    \n    slice : expression COLON expression COLON expression\n    \n    slice : expression COLON COLON expression\n    \n    slice : expression COLON expression\n    \n    slice : expression COLON\n    \n    slice : COLON COLON expression\n    \n    slice : COLON expression\n    \n    slice : COLON\n    \n    slice : expression\n    \n    expression : expression RANGE expression\n    \n    control_flow : if_statement\n                 | while_statement\n    \n    if_statement : IF expression COLON block ELSE COLON block\n                 | IF expression COLON block\n    \n    while_statement : WHILE expression COLON block\n    \n    block : INDENT statements OUTDENT\n    \n    function_definition : DEF IDENTIFIER LPAREN RPAREN COLON block\n    '
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,10,12,13,14,15,18,19,23,39,46,47,53,54,55,56,57,58,59,60,61,62,63,67,69,70,71,72,73,74,75,76,82,85,88,89,90,96,99,101,103,],[8,8,-3,-4,-5,-6,-7,-23,-21,-22,-24,-25,-47,-48,-2,-23,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-46,-20,-28,-29,-30,-31,-32,-33,-34,-37,-8,-50,8,-51,8,-53,-52,-49,]),'IDENTIFIER':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,66,67,69,70,71,72,73,74,75,76,77,81,82,83,85,88,89,90,92,96,97,99,101,103,],[10,10,-3,-4,-5,-6,-7,39,-23,39,-21,-22,-24,-25,39,39,-47,-48,50,39,39,-2,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-23,39,39,39,39,39,39,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,39,-46,-20,-28,-29,-30,-31,-32,-33,-34,39,39,-37,39,-8,-50,10,-51,39,10,39,-53,-52,-49,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,50,53,54,55,56,57,58,59,60,61,62,63,66,67,69,70,71,72,73,74,75,76,77,81,82,83,85,88,89,90,92,96,97,99,101,103,],[9,9,-3,-4,-5,-6,-7,37,9,-23,9,-21,-22,-24,-25,9,9,-47,-48,9,9,-2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-23,9,9,9,9,9,9,-26,-27,78,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,9,-46,-20,-28,-29,-30,-31,-32,-33,-34,9,9,-37,9,-8,-50,9,-51,9,9,9,-53,-52,-49,]),'INTEGER':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,66,67,69,70,71,72,73,74,75,76,77,81,82,83,85,88,89,90,92,96,97,99,101,103,],[12,12,-3,-4,-5,-6,-7,12,-23,12,-21,-22,-24,-25,12,12,-47,-48,12,12,-2,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-23,12,12,12,12,12,12,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,12,-46,-20,-28,-29,-30,-31,-32,-33,-34,12,12,-37,12,-8,-50,12,-51,12,12,12,-53,-52,-49,]),'FLOAT':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,66,67,69,70,71,72,73,74,75,76,77,81,82,83,85,88,89,90,92,96,97,99,101,103,],[13,13,-3,-4,-5,-6,-7,13,-23,13,-21,-22,-24,-25,13,13,-47,-48,13,13,-2,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-23,13,13,13,13,13,13,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,13,-46,-20,-28,-29,-30,-31,-32,-33,-34,13,13,-37,13,-8,-50,13,-51,13,13,13,-53,-52,-49,]),'STRING_LITERAL':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,66,67,69,70,71,72,73,74,75,76,77,81,82,83,85,88,89,90,92,96,97,99,101,103,],[14,14,-3,-4,-5,-6,-7,14,-23,14,-21,-22,-24,-25,14,14,-47,-48,14,14,-2,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-23,14,14,14,14,14,14,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,14,-46,-20,-28,-29,-30,-31,-32,-33,-34,14,14,-37,14,-8,-50,14,-51,14,14,14,-53,-52,-49,]),'BOOLEAN':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,66,67,69,70,71,72,73,74,75,76,77,81,82,83,85,88,89,90,92,96,97,99,101,103,],[15,15,-3,-4,-5,-6,-7,15,-23,15,-21,-22,-24,-25,15,15,-47,-48,15,15,-2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-23,15,15,15,15,15,15,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,15,-46,-20,-28,-29,-30,-31,-32,-33,-34,15,15,-37,15,-8,-50,15,-51,15,15,15,-53,-52,-49,]),'MINUS':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,86,88,89,90,91,92,93,96,97,98,99,101,102,103,],[11,11,-3,-4,25,-6,-7,11,-23,11,-21,-22,-24,-25,11,11,-47,-48,11,11,-2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,25,-23,11,11,11,11,11,11,-26,25,25,25,25,-9,-10,-11,-12,-13,25,25,25,25,25,25,25,11,25,25,-20,25,25,25,25,25,25,-34,11,11,-37,11,25,-8,25,-50,11,-51,25,11,25,11,11,25,-53,-52,25,-49,]),'NOT':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,66,67,69,70,71,72,73,74,75,76,77,81,82,83,85,88,89,90,92,96,97,99,101,103,],[16,16,-3,-4,-5,-6,-7,16,-23,16,-21,-22,-24,-25,16,16,-47,-48,16,16,-2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-23,16,16,16,16,16,16,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,16,-46,-20,-28,-29,-30,-31,-32,-33,-34,16,16,-37,16,-8,-50,16,-51,16,16,16,-53,-52,-49,]),'LBRACKET':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,86,88,89,90,91,92,93,96,97,98,99,101,102,103,],[17,17,-3,-4,35,-6,-7,17,-23,17,-21,-22,-24,-25,17,17,-47,-48,17,17,-2,17,17,17,17,17,17,17,17,17,17,17,17,17,17,35,-23,17,17,17,17,17,17,-26,-27,35,35,35,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,35,17,35,35,-20,35,35,35,35,35,35,-34,17,17,-37,17,35,-8,35,-50,17,-51,35,17,35,17,17,35,-53,-52,35,-49,]),'DEF':([0,2,3,4,5,6,7,10,12,13,14,15,18,19,23,39,46,47,53,54,55,56,57,58,59,60,61,62,63,67,69,70,71,72,73,74,75,76,82,85,88,89,90,96,99,101,103,],[20,20,-3,-4,-5,-6,-7,-23,-21,-22,-24,-25,-47,-48,-2,-23,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-46,-20,-28,-29,-30,-31,-32,-33,-34,-37,-8,-50,20,-51,20,-53,-52,-49,]),'IF':([0,2,3,4,5,6,7,10,12,13,14,15,18,19,23,39,46,47,53,54,55,56,57,58,59,60,61,62,63,67,69,70,71,72,73,74,75,76,82,85,88,89,90,96,99,101,103,],[21,21,-3,-4,-5,-6,-7,-23,-21,-22,-24,-25,-47,-48,-2,-23,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-46,-20,-28,-29,-30,-31,-32,-33,-34,-37,-8,-50,21,-51,21,-53,-52,-49,]),'WHILE':([0,2,3,4,5,6,7,10,12,13,14,15,18,19,23,39,46,47,53,54,55,56,57,58,59,60,61,62,63,67,69,70,71,72,73,74,75,76,82,85,88,89,90,96,99,101,103,],[22,22,-3,-4,-5,-6,-7,-23,-21,-22,-24,-25,-47,-48,-2,-23,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-46,-20,-28,-29,-30,-31,-32,-33,-34,-37,-8,-50,22,-51,22,-53,-52,-49,]),'$end':([1,2,3,4,5,6,7,10,12,13,14,15,18,19,23,39,46,47,53,54,55,56,57,58,59,60,61,62,63,67,69,70,71,72,73,74,75,76,82,85,88,90,99,101,103,],[0,-1,-3,-4,-5,-6,-7,-23,-21,-22,-24,-25,-47,-48,-2,-23,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-46,-20,-28,-29,-30,-31,-32,-33,-34,-37,-8,-50,-51,-53,-52,-49,]),'OUTDENT':([3,4,5,6,7,10,12,13,14,15,18,19,23,39,46,47,53,54,55,56,57,58,59,60,61,62,63,67,69,70,71,72,73,74,75,76,82,85,88,90,96,99,101,103,],[-3,-4,-5,-6,-7,-23,-21,-22,-24,-25,-47,-48,-2,-23,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-46,-20,-28,-29,-30,-31,-32,-33,-34,-37,-8,-50,-51,101,-53,-52,-49,]),'PLUS':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[24,-23,-21,-22,-24,-25,24,-23,-26,24,24,24,24,-9,-10,-11,-12,-13,24,24,24,24,24,24,24,24,24,-20,24,24,24,24,24,24,-34,-37,24,24,24,24,24,24,]),'TIMES':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[26,-23,-21,-22,-24,-25,26,-23,-26,26,26,26,26,26,26,-11,-12,-13,26,26,26,26,26,26,26,26,26,-20,26,26,26,26,26,26,-34,-37,26,26,26,26,26,26,]),'DIVIDE':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[27,-23,-21,-22,-24,-25,27,-23,-26,27,27,27,27,27,27,-11,-12,-13,27,27,27,27,27,27,27,27,27,-20,27,27,27,27,27,27,-34,-37,27,27,27,27,27,27,]),'MODULO':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[28,-23,-21,-22,-24,-25,28,-23,-26,28,28,28,28,28,28,-11,-12,-13,28,28,28,28,28,28,28,28,28,-20,28,28,28,28,28,28,-34,-37,28,28,28,28,28,28,]),'GREATER_THAN':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[29,-23,-21,-22,-24,-25,29,-23,-26,29,29,29,29,-9,-10,-11,-12,-13,None,None,None,None,None,None,29,29,29,-20,29,29,29,29,29,29,-34,-37,29,29,29,29,29,29,]),'LESS_THAN':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[30,-23,-21,-22,-24,-25,30,-23,-26,30,30,30,30,-9,-10,-11,-12,-13,None,None,None,None,None,None,30,30,30,-20,30,30,30,30,30,30,-34,-37,30,30,30,30,30,30,]),'GREATER_EQUAL':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[31,-23,-21,-22,-24,-25,31,-23,-26,31,31,31,31,-9,-10,-11,-12,-13,None,None,None,None,None,None,31,31,31,-20,31,31,31,31,31,31,-34,-37,31,31,31,31,31,31,]),'LESS_EQUAL':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[32,-23,-21,-22,-24,-25,32,-23,-26,32,32,32,32,-9,-10,-11,-12,-13,None,None,None,None,None,None,32,32,32,-20,32,32,32,32,32,32,-34,-37,32,32,32,32,32,32,]),'EQUAL':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[33,-23,-21,-22,-24,-25,33,-23,-26,33,33,33,33,-9,-10,-11,-12,-13,None,None,None,None,None,None,33,33,33,-20,33,33,33,33,33,33,-34,-37,33,33,33,33,33,33,]),'NOT_EQUAL':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[34,-23,-21,-22,-24,-25,34,-23,-26,34,34,34,34,-9,-10,-11,-12,-13,None,None,None,None,None,None,34,34,34,-20,34,34,34,34,34,34,-34,-37,34,34,34,34,34,34,]),'RANGE':([5,10,12,13,14,15,38,39,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,82,84,86,91,93,98,102,],[36,-23,-21,-22,-24,-25,36,-23,-26,-27,36,36,36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,36,36,36,-20,36,36,36,36,36,36,-34,-37,36,36,36,36,36,36,]),'ASSIGN':([10,],[40,]),'ADD_ASSIGN':([10,],[41,]),'SUB_ASSIGN':([10,],[42,]),'MUL_ASSIGN':([10,],[43,]),'DIV_ASSIGN':([10,],[44,]),'MOD_ASSIGN':([10,],[45,]),'RPAREN':([12,13,14,15,38,39,46,47,53,54,55,56,57,58,59,60,61,62,63,67,68,69,76,78,82,],[-21,-22,-24,-25,69,-23,-26,-27,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-46,85,-20,-34,87,-37,]),'RBRACKET':([12,13,14,15,39,46,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,81,82,84,86,91,93,98,102,],[-21,-22,-24,-25,-23,-26,-27,76,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-45,82,-44,-46,-20,-34,-41,-37,-43,-35,-40,-42,-39,-38,]),'COMMA':([12,13,14,15,39,46,47,48,49,53,54,55,56,57,58,59,60,61,62,63,67,69,76,82,86,],[-21,-22,-24,-25,-23,-26,-27,77,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-46,-20,-34,-37,-35,]),'COLON':([12,13,14,15,35,39,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,69,76,81,82,87,91,95,],[-21,-22,-24,-25,66,-23,-26,-27,79,80,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,81,83,-46,-20,-34,92,-37,94,97,100,]),'INDENT':([79,80,94,100,],[89,89,89,89,]),'ELSE':([88,101,],[95,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,89,],[2,96,]),'statement':([0,2,89,96,],[3,23,3,23,]),'assignment':([0,2,89,96,],[4,4,4,4,]),'expression':([0,2,9,11,16,17,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,40,41,42,43,44,45,66,77,81,83,89,92,96,97,],[5,5,38,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,70,71,72,73,74,75,84,86,91,93,5,98,5,102,]),'control_flow':([0,2,89,96,],[6,6,6,6,]),'function_definition':([0,2,89,96,],[7,7,7,7,]),'if_statement':([0,2,89,96,],[18,18,18,18,]),'while_statement':([0,2,89,96,],[19,19,19,19,]),'list_elements':([17,],[48,]),'slice':([35,],[65,]),'block':([79,80,94,100,],[88,90,99,103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parse.py',45),
  ('statements -> statements statement','statements',2,'p_statements','parse.py',52),
  ('statements -> statement','statements',1,'p_statements','parse.py',53),
  ('statement -> assignment','statement',1,'p_statement','parse.py',64),
  ('statement -> expression','statement',1,'p_statement','parse.py',65),
  ('statement -> control_flow','statement',1,'p_statement','parse.py',66),
  ('statement -> function_definition','statement',1,'p_statement','parse.py',67),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement','parse.py',68),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parse.py',78),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parse.py',79),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parse.py',80),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parse.py',81),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','parse.py',82),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binop','parse.py',83),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binop','parse.py',84),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression_binop','parse.py',85),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression_binop','parse.py',86),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','parse.py',87),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression_binop','parse.py',88),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parse.py',95),
  ('expression -> INTEGER','expression',1,'p_expression_number','parse.py',102),
  ('expression -> FLOAT','expression',1,'p_expression_number','parse.py',103),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parse.py',110),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_string','parse.py',117),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','parse.py',124),
  ('expression -> MINUS expression','expression',2,'p_expression_negate','parse.py',131),
  ('expression -> NOT expression','expression',2,'p_expression_negate','parse.py',132),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','parse.py',142),
  ('assignment -> IDENTIFIER ADD_ASSIGN expression','assignment',3,'p_assignment','parse.py',143),
  ('assignment -> IDENTIFIER SUB_ASSIGN expression','assignment',3,'p_assignment','parse.py',144),
  ('assignment -> IDENTIFIER MUL_ASSIGN expression','assignment',3,'p_assignment','parse.py',145),
  ('assignment -> IDENTIFIER DIV_ASSIGN expression','assignment',3,'p_assignment','parse.py',146),
  ('assignment -> IDENTIFIER MOD_ASSIGN expression','assignment',3,'p_assignment','parse.py',147),
  ('expression -> LBRACKET list_elements RBRACKET','expression',3,'p_expression_list','parse.py',154),
  ('list_elements -> list_elements COMMA expression','list_elements',3,'p_list_elements','parse.py',161),
  ('list_elements -> expression','list_elements',1,'p_list_elements','parse.py',162),
  ('expression -> expression LBRACKET slice RBRACKET','expression',4,'p_expression_index_or_slicing','parse.py',173),
  ('slice -> expression COLON expression COLON expression','slice',5,'p_slice_full','parse.py',180),
  ('slice -> expression COLON COLON expression','slice',4,'p_slice_start_step','parse.py',187),
  ('slice -> expression COLON expression','slice',3,'p_slice_stop_step','parse.py',194),
  ('slice -> expression COLON','slice',2,'p_slice_start','parse.py',201),
  ('slice -> COLON COLON expression','slice',3,'p_slice_step','parse.py',208),
  ('slice -> COLON expression','slice',2,'p_slice_stop','parse.py',215),
  ('slice -> COLON','slice',1,'p_slice_empty','parse.py',222),
  ('slice -> expression','slice',1,'p_simple_index','parse.py',229),
  ('expression -> expression RANGE expression','expression',3,'p_expression_range','parse.py',236),
  ('control_flow -> if_statement','control_flow',1,'p_control_flow','parse.py',243),
  ('control_flow -> while_statement','control_flow',1,'p_control_flow','parse.py',244),
  ('if_statement -> IF expression COLON block ELSE COLON block','if_statement',7,'p_if_statement','parse.py',251),
  ('if_statement -> IF expression COLON block','if_statement',4,'p_if_statement','parse.py',252),
  ('while_statement -> WHILE expression COLON block','while_statement',4,'p_while_statement','parse.py',262),
  ('block -> INDENT statements OUTDENT','block',3,'p_block','parse.py',269),
  ('function_definition -> DEF IDENTIFIER LPAREN RPAREN COLON block','function_definition',6,'p_function_definition','parse.py',276),
]
